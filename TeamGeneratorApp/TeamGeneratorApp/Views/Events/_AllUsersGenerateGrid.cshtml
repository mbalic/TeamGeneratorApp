@using Kendo.Mvc.UI
@{
    Layout = null;
}

@Styles.Render("~/Content/css")
@Styles.Render("~/Content/kendo/css")
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")
@Scripts.Render("~/bundles/modernizr")
@Scripts.Render("~/bundles/kendo")


@*<script type="text/javascript">
    function onSave(e) {
        //If current value is null
        if (!e.model.TeamId) {
            //change the model value
            e.model.TeamId = 0;
            //get the currently selected value from the DDL
            var currentlySelectedValue = $(e.container.find('[data-role=dropdownlist]')[0]).data().kendoDropDownList.value();
            //set the value to the model
            e.model.set('TeamId', currentlySelectedValue);
        }
    }

</script>*@



@if (!ViewBag.IsGenerated)
{
    @(Html.Kendo().Grid<TeamGeneratorApp.Models.ViewModels.UserOnEventVM>()
          .Name("grid1")
          .Columns(columns =>
          {
              columns.Bound(p => p.UserPersonalName).Title("User");
              columns.Bound(p => p.PositionName);
              columns.Bound(p => p.Rating);
              columns.ForeignKey(p => p.TeamId, (System.Collections.IEnumerable) ViewData["teams"], "Id", "Name").Title("Preordered team").Width(200);
              columns.Command(command =>
              {
                  command.Edit();
              });
          })
          //.Events(e => e.Save("onSave"))
          .Editable(editable => editable.Mode(GridEditMode.InLine))
          .Pageable()
          .Sortable()
          .Scrollable()
          .HtmlAttributes(new {style = "height:550px;"})
          .DataSource(dataSource => dataSource
              .Ajax()
              .Batch(true)
              .ServerOperation(false)
              .PageSize(20)
              .Events(events => events.Error("error_handler").Sync("sync_handler"))
              .Model(model =>
              {
                  model.Id(p => p.Id);
                  model.Field(p => p.EventId).DefaultValue(ViewBag.EventId);
                  model.Field(p => p.UserPersonalName).Editable(false);
                  model.Field(p => p.PositionName).Editable(false);
                  model.Field(p => p.Rating).Editable(false);

              })
              //.Create(update => update.Action("AllUsersGenerateGrid_Create", "Events"))
              .Read(read => read.Action("AllUsersGenerateGrid_Read", "Events", new {eventId = ViewBag.EventId, generatorId = ViewBag.GeneratorId}))
              .Update(update => update.Action("AllUsersGenerateGrid_Update", "Events", new { generatorId = ViewBag.GeneratorId }))
          //.Destroy(update => update.Action("AllUsersGenerateGrid_Destroy", "Events"))
          )

          )
}
else
{
    @(Html.Kendo().Grid<TeamGeneratorApp.Models.ViewModels.UserOnEventVM>()
          .Name("grid2")
          .Columns(columns =>
          {
              columns.Bound(p => p.UserPersonalName).Title("User");
              columns.Bound(p => p.PositionName);
              columns.Bound(p => p.Rating);
              columns.ForeignKey(p => p.TeamId, (System.Collections.IEnumerable)ViewData["teams"], "Id", "Name").Title("Preordered team").Width(200);
          })
          .Pageable()
          .Sortable()
          .Scrollable()
          .HtmlAttributes(new { style = "height:550px;" })
          .DataSource(dataSource => dataSource
              .Ajax()
              .Batch(true)
              .ServerOperation(false)
              .PageSize(20)
              .Events(events => events.Error("error_handler").Sync("sync_handler"))
              .Model(model =>
              {
                  model.Id(p => p.Id);
                  //model.Field(p => p.EventId).DefaultValue(ViewBag.EventId);
                  //model.Field(p => p.UserPersonalName).Editable(false);
                  //model.Field(p => p.PositionName).Editable(false);
                  //model.Field(p => p.Rating).Editable(false);

              })
              //.Create(update => update.Action("UsersGrid_Create", "Events"))
              .Read(read => read.Action("AllUsersGenerateGrid_Read", "Events", new { eventId = ViewBag.EventId }))
          //.Update(update => update.Action("AllUsersGenerateGrid_Update", "Events"))
          //.Destroy(update => update.Action("UsersGrid_Destroy", "Events"))
          )

    )
}

<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    function sync_handler(e) {
        this.read();
    };
</script>
