@using Kendo.Mvc.UI
@{
    Layout = null;
}

@Styles.Render("~/Content/css")
@Styles.Render("~/Content/kendo/css")
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")
@Scripts.Render("~/bundles/modernizr")
@Scripts.Render("~/bundles/kendo")


@(Html.Kendo().Grid<TeamGeneratorApp.Models.ViewModels.EventVM>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Name);
        columns.Bound(p => p.Description);
        columns.Bound(p => p.NumberOfTeams);
        columns.Bound(p => p.Start);
        columns.Bound(p => p.Finish);
        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(250);
    })
    .ToolBar(toolbar => toolbar.Create())
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .Pageable()
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:550px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .ServerOperation(false)
        .PageSize(20)
        .Events(events => events.Error("error_handler"))
        .Model(model => model.Id(p => p.Id))
        .Create(update => update.Action("GroupEvents_Create", "Groups", new { groupId = ViewBag.GroupId }))
        .Read(read => read.Action("GroupEvents_Read", "Groups", new {groupId = ViewBag.GroupId }))
        .Update(update => update.Action("GroupEvents_Update", "Groups"))
        .Destroy(update => update.Action("GroupEvents_Destroy", "Groups"))
    )

)
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>

















@*<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Fullname)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
           @Html.DisplayNameFor(model => model.Start)
        </th>
        <th>
           @Html.DisplayNameFor(model => model.Finish)
        </th>
        <th>
           @Html.DisplayNameFor(model => model.NumberOfTeams)
        </th>

        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Fullname)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Start)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Finish)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NumberOfTeams)
            </td>

            <td>
                @Html.ActionLink("Edit",  "Edit", "Events", new { id=item.Id }) |
                @Html.ActionLink("Details", "Details", "Events", new { id=item.Id }) |
                @Html.ActionLink("Delete", "Delete", "Events", new { id=item.Id })
            </td>
        </tr>
    }

</table>

<p>
        @Html.ActionLink("Create new event", "Create", "Events")
    </p>*@